// <auto-generated />
using System;
using FPTV.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPTV.Migrations
{
    [DbContext(typeof(FPTVContext))]
    [Migration("20230316170532_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FPTV.Models.EventsModels.EventCS", b =>
                {
                    b.Property<Guid>("EventCSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BeginAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAPIID")
                        .HasColumnType("int");

                    b.Property<string>("EventLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchesCSAPIID")
                        .HasColumnType("int");

                    b.Property<string>("PrizePool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamAPIID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventCSID");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("EventCS");
                });

            modelBuilder.Entity("FPTV.Models.EventsModels.EventVal", b =>
                {
                    b.Property<Guid>("EventValID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BeginAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAPIID")
                        .HasColumnType("int");

                    b.Property<string>("EventLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchesValAPIID")
                        .HasColumnType("int");

                    b.Property<string>("PrizePool")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamAPIID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventValID");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("EventVal");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TopicId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Reaction", b =>
                {
                    b.Property<Guid>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReactionId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesCS", b =>
                {
                    b.Property<Guid>("MatchesCSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BeginAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAPIID")
                        .HasColumnType("int");

                    b.Property<Guid>("EventCSID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveStats")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("LeagueLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveSupported")
                        .HasColumnType("bit");

                    b.Property<int>("MatchesCSAPIID")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfGames")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchesCSId");

                    b.HasIndex("EventCSID");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("MatchesCS");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesVal", b =>
                {
                    b.Property<Guid>("MatchesValId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BeginAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("EventAPIID")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventValID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HaveStats")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("LeagueLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LiveSupported")
                        .HasColumnType("bit");

                    b.Property<int>("MatchesValAPIID")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfGames")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerTeamAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchesValId");

                    b.HasIndex("EventValID");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("MatchesVal");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.Stream", b =>
                {
                    b.Property<Guid>("StreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatchesCSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MatchesValId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreamLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreamLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreamId");

                    b.HasIndex("MatchesCSId");

                    b.HasIndex("MatchesValId");

                    b.ToTable("Stream");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchCS", b =>
                {
                    b.Property<Guid>("MatchCSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchCSAPIID")
                        .HasColumnType("int");

                    b.Property<int>("MatchesCSAPIId")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchesCSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoundsScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WinnerTeamAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchCSId");

                    b.HasIndex("MatchesCSId");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("MatchCS");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchPlayerStatsCS", b =>
                {
                    b.Property<Guid>("MatchPlayerStatsCSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ADR")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Assists")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Deaths")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FlashAssist")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("HeadShots")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("KD_Diff")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Kills")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("MatchCSAPIID")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchCSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PlayerCSAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerCSPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchPlayerStatsCSID");

                    b.HasIndex("MatchCSId");

                    b.HasIndex("PlayerCSPlayerId");

                    b.ToTable("MatchPlayerStatsCS");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchPlayerStatsVal", b =>
                {
                    b.Property<Guid>("MatchPlayerStatsValID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("ADR")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<int?>("Assists")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Deaths")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<float?>("HeadShots")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<float?>("KD_Diff")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<float?>("Kast")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<int?>("Kills")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("MatchValAPIID")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchValId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerValAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("PlayerValPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchPlayerStatsValID");

                    b.HasIndex("MatchValId");

                    b.HasIndex("PlayerValPlayerId");

                    b.ToTable("MatchPlayerStatsVal");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchTeamsCS", b =>
                {
                    b.Property<Guid>("MatchCSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchCSAPIID")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchCSId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamCSAPIId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamCSTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchCSId");

                    b.HasIndex("MatchCSId1");

                    b.HasIndex("TeamCSTeamId");

                    b.ToTable("MatchTeamsCS");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchTeamsVal", b =>
                {
                    b.Property<Guid>("MatchValId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchValAPIID")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchValId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamValAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamValTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchValId");

                    b.HasIndex("MatchValId1");

                    b.HasIndex("TeamValTeamId");

                    b.ToTable("MatchTeamsVal");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchVal", b =>
                {
                    b.Property<Guid>("MatchValId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchValAPIID")
                        .HasColumnType("int");

                    b.Property<int>("MatchesValAPIId")
                        .HasColumnType("int");

                    b.Property<Guid>("MatchesValId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoundsScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WinnerTeamAPIId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WinnerTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerTeamTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchValId");

                    b.HasIndex("MatchesValId");

                    b.HasIndex("WinnerTeamTeamId");

                    b.ToTable("MatchVal");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.ErrorLog", b =>
                {
                    b.Property<Guid>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ErrorLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavPlayerList", b =>
                {
                    b.Property<Guid>("FavPlayerListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavPlayerListId");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("FavPlayerList");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavTeamsList", b =>
                {
                    b.Property<Guid>("FavTeamsListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FavTeamsListId");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("FavTeamsList");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Player", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("FavPlayerListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nacionality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayerId");

                    b.HasIndex("FavPlayerListId");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FavTeamsListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Losses")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Winnings")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("WorldRank")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("FavTeamsListId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.UserBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FPTV.Models.EventsModels.EventCS", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.EventsModels.EventVal", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Comment", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.Forum.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.Navigation("Profile");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Reaction", b =>
                {
                    b.HasOne("FPTV.Models.Forum.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Comment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FPTV.Models.Forum.Topic", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesCS", b =>
                {
                    b.HasOne("FPTV.Models.EventsModels.EventCS", "EventCS")
                        .WithMany()
                        .HasForeignKey("EventCSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("EventCS");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesVal", b =>
                {
                    b.HasOne("FPTV.Models.EventsModels.EventVal", "EventVal")
                        .WithMany()
                        .HasForeignKey("EventValID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("EventVal");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.Stream", b =>
                {
                    b.HasOne("FPTV.Models.MatchesModels.MatchesCS", null)
                        .WithMany("StreamList")
                        .HasForeignKey("MatchesCSId");

                    b.HasOne("FPTV.Models.MatchesModels.MatchesVal", null)
                        .WithMany("StreamList")
                        .HasForeignKey("MatchesValId");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchCS", b =>
                {
                    b.HasOne("FPTV.Models.MatchesModels.MatchesCS", "MatchesCS")
                        .WithMany("MatchesList")
                        .HasForeignKey("MatchesCSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("MatchesCS");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchPlayerStatsCS", b =>
                {
                    b.HasOne("FPTV.Models.StatisticsModels.MatchCS", "MatchCS")
                        .WithMany("PlayerStatsList")
                        .HasForeignKey("MatchCSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Player", "PlayerCS")
                        .WithMany()
                        .HasForeignKey("PlayerCSPlayerId");

                    b.Navigation("MatchCS");

                    b.Navigation("PlayerCS");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchPlayerStatsVal", b =>
                {
                    b.HasOne("FPTV.Models.StatisticsModels.MatchVal", "MatchVal")
                        .WithMany("PlayerStatsList")
                        .HasForeignKey("MatchValId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Player", "PlayerVal")
                        .WithMany()
                        .HasForeignKey("PlayerValPlayerId");

                    b.Navigation("MatchVal");

                    b.Navigation("PlayerVal");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchTeamsCS", b =>
                {
                    b.HasOne("FPTV.Models.StatisticsModels.MatchCS", null)
                        .WithMany("TeamsList")
                        .HasForeignKey("MatchCSId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "TeamCS")
                        .WithMany()
                        .HasForeignKey("TeamCSTeamId");

                    b.Navigation("TeamCS");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchTeamsVal", b =>
                {
                    b.HasOne("FPTV.Models.StatisticsModels.MatchVal", null)
                        .WithMany("TeamsList")
                        .HasForeignKey("MatchValId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "TeamVal")
                        .WithMany()
                        .HasForeignKey("TeamValTeamId");

                    b.Navigation("TeamVal");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchVal", b =>
                {
                    b.HasOne("FPTV.Models.MatchesModels.MatchesVal", "MatchesVal")
                        .WithMany("MatchesList")
                        .HasForeignKey("MatchesValId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.Team", "WinnerTeam")
                        .WithMany()
                        .HasForeignKey("WinnerTeamTeamId");

                    b.Navigation("MatchesVal");

                    b.Navigation("WinnerTeam");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.ErrorLog", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavPlayerList", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithOne("PlayerList")
                        .HasForeignKey("FPTV.Models.UserModels.FavPlayerList", "ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavTeamsList", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithOne("TeamsList")
                        .HasForeignKey("FPTV.Models.UserModels.FavTeamsList", "ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Player", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.FavPlayerList", null)
                        .WithMany("Players")
                        .HasForeignKey("FavPlayerListId");

                    b.HasOne("FPTV.Models.UserModels.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Team", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.FavTeamsList", null)
                        .WithMany("Teams")
                        .HasForeignKey("FavTeamsListId");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.UserBase", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.Profile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("FPTV.Models.UserModels.UserBase", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTV.Models.UserModels.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FPTV.Models.UserModels.UserBase", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPTV.Models.Forum.Comment", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesCS", b =>
                {
                    b.Navigation("MatchesList");

                    b.Navigation("StreamList");
                });

            modelBuilder.Entity("FPTV.Models.MatchesModels.MatchesVal", b =>
                {
                    b.Navigation("MatchesList");

                    b.Navigation("StreamList");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchCS", b =>
                {
                    b.Navigation("PlayerStatsList");

                    b.Navigation("TeamsList");
                });

            modelBuilder.Entity("FPTV.Models.StatisticsModels.MatchVal", b =>
                {
                    b.Navigation("PlayerStatsList");

                    b.Navigation("TeamsList");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavPlayerList", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.FavTeamsList", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Profile", b =>
                {
                    b.Navigation("PlayerList");

                    b.Navigation("TeamsList");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("FPTV.Models.UserModels.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
